;;;; parse-csv.lisp

(in-package #:cl-stocks)

(defun parse-year (line)
  (parse-integer line :start 0 :end 4))
(defun parse-month (line)
  (parse-integer line :start 5 :end 7))
(defun parse-day (line)
  (parse-integer line :start 8 :end 10))
(defun parse-date (line)
  (encode-universal-time 0 0 0 (parse-day line) (parse-month line) (parse-year line)))

(defun parse-stock-prices (filename)
  (let ((result nil) (two-hundred-sma (simple-moving-average 200)) (current-stock-price (make-instance 'stock-price)))
    (with-open-file (file (parse-namestring filename) :direction :input)
      (dolist (row (rest (cl-csv:read-csv file)) (add-52w-numbers result))
        (setf (stock-price-date current-stock-price) (parse-date (first row)))
        (setf (stock-price-open current-stock-price) (floor (* 100000 (parse-number:parse-number (second row)))))
        (setf (stock-price-close current-stock-price) (floor (* 100000 (parse-number:parse-number (fifth row)))))
        (setf (stock-price-sma current-stock-price) (funcall two-hundred-sma (stock-price-close current-stock-price)))
        (push current-stock-price result)
        (setf current-stock-price (make-instance 'stock-price))))))

(defun parse-stock-divs (filename)
  (let ((result nil) (current-stock-div (make-instance 'stock-div)))
    (with-open-file (file (parse-namestring filename) :direction :input)
      (dolist (row (rest (cl-csv:read-csv file)) result)
        (setf (stock-div-date current-stock-div) (parse-date (first row)))
        (setf (stock-div-div current-stock-div) (floor (* 100000 (parse-number:parse-number (second row)))))
        (push current-stock-div result)
        (setf current-stock-div (make-instance 'stock-div))))))

(defun parse-stock-splits (filename)
  (let ((result nil) (current-stock-split (make-instance 'stock-split)))
    (with-open-file (file (parse-namestring filename) :direction :input)
      (dolist (row (rest (cl-csv:read-csv file)) result)
        (setf (stock-split-date current-stock-split) (parse-date (first row)))
        (setf (stock-split-factor current-stock-split) (parse-number:parse-number (second row)))
        (push current-stock-split result)
        (setf current-stock-split (make-instance 'stock-split))))))
